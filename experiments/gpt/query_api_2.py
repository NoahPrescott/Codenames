import os
import openai
import json
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import pandas as pd
import plotly.express as px
import scipy as scipy
from scipy.stats import pearsonr
import random

# Prompts
query_clue_opener_with_assassin_no_target = (
    "You will be shown a board of 12 words, including one 'assassin' word. Your task is to select 3 words from the board and provide a one-word clue that will help another player guess those 3 words. "
    "Be very careful: your clue should strongly suggest the 3 words you have chosen, while making it as unlikely as possible for the other player to select the assassin word. "
    "Selecting the assassin word is especially detrimental and should be avoided at all costs. "
    "The words are: {words}. "
    "The 'assassin' word is: {assassin_word}"
)
query_clue_closer_with_assassin_no_target = "Please give your response in this format: CLUE. WORD,WORD,WORD"

query_clue_opener_no_assassin_no_target = (
    "You will be shown a board of 12 words. Your task is to select 3 of the words, and come up with a one-word clue that would allow another player to guess those words. "
    "After you choose the 3 words and give your clue, another player will be shown the same board of 12 words and your clue, and will be asked to guess the 3 words that you had in mind. "
    "Your clue should apply to each of the 3 words you chose more than it applies to any of the other words. "
    "The words are: {words}. "
)
query_clue_closer_no_assassin_no_target = "Please give your response in this format: CLUE. WORD,WORD,WORD"

query_clue_opener_with_assassin_with_target = (
    "You will be shown a board of 12 words, including an 'assassin' word and a set of 3 target words. Your task is to provide a one-word clue that will help another player guess those 3 target words. "
    "Be very careful: your clue should strongly suggest the 3 target words, while making it as unlikely as possible for the other player to select the assassin word. "
    "Selecting the assassin word is especially detrimental and should be avoided at all costs. "
    "The words are: {words}. "
    "The target words are: {targets}. "
    "The 'assassin' word is: {assassin_word}"
)
query_clue_closer_with_assassin_with_target = "Please give your response in this format: CLUE. WORD,WORD,WORD"

query_clue_opener_no_assassin_with_target = (
    "You will be shown a board of 12 words. 3 of these words are target words. Your task is to come up with a one-word clue that would allow another player to guess those 3 target words. "
    "After you give your clue, another player will be shown the same board of 12 words and your clue, and will be asked to guess which 3 words that you had in mind. "
    "Your clue should apply to each of the 3 target words you chose more than it applies to any of the other words. "
    "The words are: {words}. "
    "The target words are: {targets}. "
)
query_clue_closer_no_assassin_with_target = "Please give your response in this format: CLUE. WORD,WORD,WORD"

# Function to get GPT-4 response
def get_response(query, temperature=0):
    max_tries = 10
    for i in range(max_tries):
        try:
            chat_completion = openai.ChatCompletion.create(
                model="gpt-4",
                temperature=temperature,
                messages=[{"role": "user", "content": query}]
            )
            return chat_completion.choices[0].message.content
        except openai.error.Timeout as e:
            print(f"OpenAI API returned an API Error: {e}")
            print(f"Trying again, attempt #{(i+1)}")

# Function to create the prompt for GPT-4 to generate clues
def clue_query(board):
    if board["include_assassin"] and board["set_targets"]:
        query_opener = query_clue_opener_with_assassin_with_target
    elif board["include_assassin"]:
        query_opener = query_clue_opener_with_assassin_no_target
    elif board["set_targets"]:
        query_opener = query_clue_opener_no_assassin_with_target
    else:
        query_opener = query_clue_opener_no_assassin_no_target
    
    q = query_opener.format(
        words=', '.join([w.lower() for w in board["words"]]),
        targets=', '.join([w.lower() for w in board["targets"]]) if board["set_targets"] else '',
        assassin_word=', '.join([w.lower() for w in board["assassin_words"]]) if board["include_assassin"] else ''
    )
    
    q += "\n" + query_clue_closer_with_assassin_no_target  # Use the correct closer format
    return q

# Function to test the stability of clues generated by GPT-4
def test_clue_stability(board, num_iterations=50, temperature=0):
    clues = []
    for _ in range(num_iterations):
        query = clue_query(board)
        print(query)
        response = get_response(query, temperature=temperature)
        print(response)
        clues.append(response.split('.')[0].strip().upper())
    return clues

def plot_clue_histogram(clues, title, filename, board):
    plt.figure(figsize=(12, 8))

    # Create the histogram
    plt.hist(clues, bins=len(set(clues)), edgecolor='black')
    
    # Set title and labels
    plt.title(title, pad=20)
    plt.xlabel('Clues')
    plt.ylabel('Frequency')

    # Adding the list of words and target words under the title
    word_text = f"Board Words: {', '.join(board['words'])}\n"
    if board['targets']:
        word_text += f"Target Words: {', '.join(board['targets'])}\n"
    if board['assassin_words']:
        word_text += f"Assassin Words: {', '.join(board['assassin_words'])}"
    
    plt.figtext(0.5, 0.9, word_text, ha='center', va='top', fontsize=10, bbox=dict(facecolor='white', edgecolor='none', boxstyle='round,pad=0.5'))

    plt.tight_layout()  # Adjust layout to fit everything
    plt.subplots_adjust(top=0.8)  # Adjust the top of the subplot to make room for the text
    plt.savefig(filename)  # Save the plot as an image file
    plt.close()  # Close the plot to free up memory

# Board generation function
def create_boards(num_boards=1, board_size=12, num_target_words=3, num_assassin_words=1, include_assassin=True, set_targets=False):
    word_pool = [
        "GIANT", "DUCK", "CHARGE", "WATER", "BERMUDA", "FOREST", "LIFE", "WORM", "PISTOL", 
        "POINT", "OLIVE", "PITCH", "AMERICA", "LEAD", "PRESS", "MAMMOTH", "PANTS", "HORSESHOE", 
        "SPACE", "CLIFF", "FENCE", "DRAFT", "PLOT"
    ]

    boards = []

    for _ in range(num_boards):
        selected_words = random.sample(word_pool, board_size)
        if set_targets:
            target_words = random.sample(selected_words, num_target_words)
        else:
            target_words = []
        assassin_words = []

        if include_assassin:
            assassin_words = random.sample([word for word in selected_words if word not in target_words], num_assassin_words)

        board = {
            "words": selected_words,
            "targets": target_words,
            "assassin_words": assassin_words,
            "include_assassin": include_assassin,
            "set_targets": set_targets,
            "clue": None  # Clue will be generated by GPT
        }
        boards.append(board)
    
    return boards

# Main function to generate boards, test clue stability, and plot histograms
def main():
    num_iterations = 50

    # Case 1: Board with an assassin word, targets not set
    boards_with_assassin = create_boards(num_boards=1, include_assassin=True, set_targets=False)
    clues_with_assassin = test_clue_stability(boards_with_assassin[0], num_iterations=num_iterations)
    plot_clue_histogram(clues_with_assassin, "Clue Frequency Distribution (With Assassin, No Set Targets)", "case1_with_assassin_no_set_targets.png", boards_with_assassin[0])

    # Case 2: Board without an assassin word, targets not set
    boards_without_assassin = create_boards(num_boards=1, include_assassin=False, set_targets=False)
    clues_without_assassin = test_clue_stability(boards_without_assassin[0], num_iterations=num_iterations)
    plot_clue_histogram(clues_without_assassin, "Clue Frequency Distribution (Without Assassin, No Set Targets)", "case2_without_assassin_no_set_targets.png", boards_without_assassin[0])

    # Case 3: Board with set targets and an assassin word
    boards_with_assassin_and_targets = create_boards(num_boards=1, include_assassin=True, set_targets=True)
    clues_with_assassin_and_targets = test_clue_stability(boards_with_assassin_and_targets[0], num_iterations=num_iterations)
    plot_clue_histogram(clues_with_assassin_and_targets, "Clue Frequency Distribution (With Assassin, Set Targets)", "case3_with_assassin_set_targets.png", boards_with_assassin_and_targets[0])

    # Case 4: Board with no set targets and no assassin word
    boards_without_assassin_and_targets = create_boards(num_boards=1, include_assassin=False, set_targets=True)
    clues_without_assassin_and_targets = test_clue_stability(boards_without_assassin_and_targets[0], num_iterations=num_iterations)
    plot_clue_histogram(clues_without_assassin_and_targets, "Clue Frequency Distribution (Without Assassin, Set Targets)", "case4_without_assassin_set_targets.png", boards_without_assassin_and_targets[0])

# Run the main function
main()
